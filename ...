-- Ensure you have the necessary services
local VirtualInputManager = game:GetService("VirtualInputManager")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local GuiService = game:GetService("GuiService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

-- Locals
local LocalPlayer = Players.LocalPlayer
local LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = LocalCharacter:FindFirstChild("HumanoidRootPart")
local ActiveFolder = Workspace:FindFirstChild("active")
local FishingZonesFolder = Workspace:FindFirstChild("zones"):WaitForChild("fishing")
local TpSpotsFolder = Workspace:FindFirstChild("world"):WaitForChild("spawns"):WaitForChild("TpSpots")
local NpcFolder = Workspace:FindFirstChild("world"):WaitForChild("npcs")
local PlayerGUI = LocalPlayer:FindFirstChildOfClass("PlayerGui")
local safePart = Instance.new("Part")
safePart.Name = "SafeZoneAnchor"
safePart.Size = Vector3.new(10, 2, 10)
safePart.CFrame = CFrame.new(0, 1000, 0)
safePart.Anchored = true
safePart.CanCollide = true
safePart.Parent = Workspace

-- Load the Orion library from the correct URL
local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/Chaosscripter/Riotscripter/refs/heads/main/Orion%20Library%203"))()

local Window = OrionLib:MakeWindow({
    Name = "Midnight Hub ðŸŒ™",
    HidePremium = false,
    IntroText = "Midnight Hub ðŸŒ™",
    SaveConfig = true,
    ConfigFolder = "MidnightHub",
    ConfigName = "Fisch"
})

-- Main Tab
local MainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483362458",
    PremiumOnly = false
})

local autoCast = false
local autoCastDelay = 2
local autoCastConnection, autoCastConnection2

MainTab:AddToggle({
    Name = "Auto Cast",
    Default = false,
    Callback = function(Value)
        autoCast = Value
        if autoCast then
            autoCastConnection = LocalCharacter.ChildAdded:Connect(function(child)
                if child:IsA("Tool") and child:FindFirstChild("events"):WaitForChild("cast") and autoCast then
                    task.wait(autoCastDelay)
                    child.events.cast:FireServer(100)
                end
            end)

            autoCastConnection2 = PlayerGUI.ChildRemoved:Connect(function(GUI)
                local Tool = LocalCharacter:FindFirstChildOfClass("Tool")
                if GUI.Name == "reel" and autoCast and Tool and Tool:FindFirstChild("events"):WaitForChild("cast") then
                    task.wait(autoCastDelay)
                    Tool.events.cast:FireServer(100)
                end
            end)
        else
            if autoCastConnection then
                autoCastConnection:Disconnect()
                autoCastConnection = nil
            end
            if autoCastConnection2 then
                autoCastConnection2:Disconnect()
                autoCastConnection2 = nil
            end
        end
    end,
})

MainTab:AddSlider({
    Name = "Auto Cast Cooldown",
    Min = 1,
    Max = 10,
    Increment = 0.1,
    Default = 2,
    Callback = function(Value)
        autoCastDelay = Value
    end,
})

-- Initialize ZoneCast settings
local ZoneCast = false
local SelectedZone = nil
local ZonesList = {}

-- Fill ZonesList with unique fishing zones based on names
for _, zone in pairs(FishingZonesFolder:GetChildren()) do
    if not table.find(ZonesList, zone.Name) then
        table.insert(ZonesList, zone.Name)
    end
end

-- Zone Cast Toggle
MainTab:AddToggle({
    Name = "Zone Cast",
    Default = false,
    Callback = function(Value)
        ZoneCast = Value
        if ZoneCast then
            -- Start teleporting the 'blehh' part when ZoneCast is enabled
            ZoneConnection = LocalCharacter.ChildAdded:Connect(function(child)
                if ZoneCast and child:IsA("Tool") and SelectedZone then
                    child.ChildAdded:Connect(function(blehh)
                        if blehh.Name == "bobber" then
                            local RopeConstraint = blehh:FindFirstChildOfClass("RopeConstraint")

                            -- Ensure RopeConstraint length is set correctly even after teleportation
                            if RopeConstraint then
                                RopeConstraint.Length = math.huge
                                RopeConstraint.Changed:Connect(function(property)
                                    if property == "Length" then
                                        RopeConstraint.Length = math.huge
                                    end
                                end)
                            end

                            -- Immediately move 'blehh' to the selected zone's position
                            task.wait(1)
                            while ZoneCast and blehh.Parent do
                                -- Find the zone by its name in FishingZonesFolder
                                local zoneObject = FishingZonesFolder:FindFirstChild(SelectedZone)
                                if zoneObject then
                                    -- Teleport the bobber (blehh) to the zone
                                    -- Add an offset for Z-axis if necessary, here adding 5 studs in the Y-axis
                                    blehh.CFrame = zoneObject.CFrame * CFrame.new(0, 5, 0)
                                end
                                task.wait()
                            end

                            -- Lock the player in place using BodyPosition
                            local humanoidRootPart = LocalCharacter:FindFirstChild("HumanoidRootPart")
                            if humanoidRootPart then
                                -- Create a BodyPosition to lock the position
                                local bodyPosition = Instance.new("BodyPosition")
                                bodyPosition.MaxForce = Vector3.new(100000, 100000, 100000)  -- Max force for all axes
                                bodyPosition.D = 1000  -- Damping (how quickly it stops oscillation)
                                bodyPosition.P = 10000  -- Power (how strong the force is applied)
                                bodyPosition.Position = humanoidRootPart.Position  -- Lock to the current position
                                bodyPosition.Parent = humanoidRootPart  -- Attach it to the root part

                                -- Wait before unfreezing the player (give time for fishing to start)
                                task.wait(1)

                                -- Remove the BodyPosition to allow movement again
                                bodyPosition:Destroy()
                            end
                        end
                    end)
                end
            end)
        else
            -- Disconnect the ZoneCast when the toggle is off
            if ZoneConnection then
                ZoneConnection:Disconnect()
                ZoneConnection = nil
            end
        end
    end,
})

-- Fishing Zone Dropdown for selection
MainTab:AddDropdown({
    Name = "Select Fishing Zone",
    Options = ZonesList,
    Callback = function(Selected)
        SelectedZone = Selected  -- Store the selected zone name
    end,
})

-- Variables to hold the state and configurations
local autoReel = false
local autoReelDelay = 1
local autoShake = false
local autoShakeDelay = 1
local autoShakeMethod = "ClickEvent"

-- Auto Reel
MainTab:AddToggle({
    Name = "Auto Reel",
    Default = false,
    Callback = function(Value)
        autoReel = Value
        if autoReel then
            autoreelandshakeConnection = PlayerGUI.ChildAdded:Connect(function(GUI)
                if GUI:IsA("ScreenGui") and GUI.Name == "reel" then
                    repeat
                        task.wait(autoReelDelay)
                        local args = {
                            [1] = 100,
                            [2] = false
                        }
                        ReplicatedStorage.events:WaitForChild("reelfinished"):FireServer(unpack(args))
                    until GUI == nil
                end
            end)
        else
            if autoreelandshakeConnection then
                autoreelandshakeConnection:Disconnect()
            end
        end
    end,
})

MainTab:AddSlider({
    Name = "Auto Reel Cooldown",
    Min = 0,
    Max = 10,
    Increment = 0.1,
    Default = 1,
    Callback = function(Value)
        autoReelDelay = Value
    end,
})

-- Auto Shake
MainTab:AddToggle({
    Name = "Auto Shake",
    Default = false,
    Callback = function(Value)
        autoShake = Value
        if autoShake then
            autoreelandshakeConnection = PlayerGUI.ChildAdded:Connect(function(GUI)
                if GUI:IsA("ScreenGui") and GUI.Name == "shakeui" then
                    if GUI:FindFirstChild("safezone") ~= nil then
                        GUI.safezone.ChildAdded:Connect(function(child)
                            if child:IsA("ImageButton") and child.Name == "button" then
                                task.wait(autoShakeDelay)
                                if child.Visible == true then
                                    if autoShakeMethod == "ClickEvent" then
                                        local pos = child.AbsolutePosition
                                        local size = child.AbsoluteSize
                                        VirtualInputManager:SendMouseButtonEvent(pos.X + size.X / 2, pos.Y + size.Y / 2, 0, true, LocalPlayer, 0)
                                        VirtualInputManager:SendMouseButtonEvent(pos.X + size.X / 2, pos.Y + size.Y / 2, 0, false, LocalPlayer, 0)
                                    elseif autoShakeMethod == "KeyCodeEvent" then
                                        GuiService.Changed:Connect(function(property)
                                            GuiService.SelectedObject = child
                                            if property == "SelectedObject" then
                                                if GuiService.SelectedObject == child then
                                                    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                                                    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                                                end
                                            end
                                        end)
                                        GuiService.SelectedObject = child
                                    end
                                end
                            end
                        end)
                    end
                end
            end)
        else
            if autoreelandshakeConnection then
                autoreelandshakeConnection:Disconnect()
            end
        end
    end,
})

MainTab:AddDropdown({
    Name = "Auto Shake Mode",
    Options = {"ClickEvent", "KeyCodeEvent"},
    Callback = function(Selected)
        autoShakeMethod = Selected
    end,
})

MainTab:AddSlider({
    Name = "Auto Shake Cooldown",
    Min = 0,
    Max = 10,
    Increment = 0.1,
    Default = 1,
    Callback = function(Value)
        autoShakeDelay = Value
    end,
})

-- Store Tab
local StoreTab = Window:MakeTab({
    Name = "Store",
    Icon = "rbxassetid://4483362458",
    PremiumOnly = false
})

StoreTab:AddButton({
    Name = "Sell Fish",
    Callback = function()
        ReplicatedStorage.events:WaitForChild("Sell"):InvokeServer()
    end,
})

StoreTab:AddButton({
    Name = "Sell All Fish",
    Callback = function()
        ReplicatedStorage.events:WaitForChild("SellAll"):InvokeServer()
    end,
})

StoreTab:AddButton({
    Name = "Appraise Fish",
    Callback = function()
        Workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Appraiser"):WaitForChild("appraiser"):WaitForChild("appraise"):InvokeServer()
    end,
})

-- Teleports Tab
local TeleportsTab = Window:MakeTab({
    Name = "Teleports",
    Icon = "rbxassetid://4483362458",
    PremiumOnly = false
})

TeleportsTab:AddLabel("Places")

local function capitalizeFirstLetter(str)
    return str:sub(1, 1):upper() .. str:sub(2):lower()
end

local teleportOptions = {}
for _, spot in pairs(TpSpotsFolder:GetChildren()) do
    table.insert(teleportOptions, capitalizeFirstLetter(spot.Name))
end

TeleportsTab:AddDropdown({
    Name = "Teleport to Place",
    Options = teleportOptions,
    Callback = function(Selected)
        local actualSpotName = Selected:lower()
        local selectedPlace = TpSpotsFolder:FindFirstChild(actualSpotName)
        if selectedPlace and HumanoidRootPart then
            HumanoidRootPart.CFrame = selectedPlace.CFrame + Vector3.new(0, 5, 0)
        end
    end,
})

local formattedNpcNames = {}
for npcName, _ in pairs(npcSpots) do
    local formattedName = npcName:gsub("_", " "):gsub("(%a)([%w_']*)", function(first, rest) return first:upper() .. rest:lower() end)
    table.insert(formattedNpcNames, formattedName)
end

TeleportsTab:AddLabel("NPCs")

TeleportsTab:AddDropdown({
    Name = "Teleport to NPC",
    Options = formattedNpcNames,
    Callback = function(SelectedNpc)
        local originalName = SelectedNpc:gsub(" ", "_")
        local npcCFrame = npcSpots[originalName]

        if npcCFrame and HumanoidRootPart then
            HumanoidRootPart.CFrame = npcCFrame + Vector3.new(0, 2, 0)
        end
    end,
})

TeleportsTab:AddLabel("Items")

TeleportsTab:AddDropdown({
    Name = "Teleport to Item",
    Options = {
        "Bait Crate",
        "Carbon Rod",
        "Crab Cage",
        "Fast Rod",
        "Flimsy Rod",
        "GPS",
        "Long Rod",
        "Lucky Rod",
        "Plastic Rod",
        "Training Rod"
    },
    Callback = function(Selected)
        local itemCFrame = itemSpots[Selected:gsub(" ", "_")]
        if itemCFrame then
            local newCFrame = CFrame.new(itemCFrame.Position + Vector3.new(0, 5, 0)) * CFrame.Angles(0, itemCFrame:ToEulerAnglesXYZ())
            HumanoidRootPart.CFrame = newCFrame
        end
    end,
})

TeleportsTab:AddLabel("SafeZone")

TeleportsTab:AddButton({
    Name = "Teleport to SafeZone",
    Callback = function()
        if safePart and HumanoidRootPart then
            HumanoidRootPart.CFrame = safePart.CFrame + Vector3.new(0, 5, 0)
        end
    end,
})

TeleportsTab:AddLabel("Totems")

TeleportsTab:AddButton({
    Name = "Teleport to Aurora",
    Callback = function()
        local args = {
            [1] = Workspace:WaitForChild("zones"):WaitForChild("player"):WaitForChild("Brine Pool")
        }
        ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RF/SetZone"):InvokeServer(unpack(args))
    end,
})

TeleportsTab:AddButton({
    Name = "Teleport to Smokescreen",
    Callback = function()
        local args = {
            [1] = Workspace:WaitForChild("zones"):WaitForChild("player"):WaitForChild("Mushgrove")
        }
        ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RF/SetZone"):InvokeServer(unpack(args))
    end,
})

TeleportsTab:AddButton({
    Name = "Teleport to Windset",
    Callback = function()
        local args = {
            [1] = Workspace:WaitForChild("zones"):WaitForChild("player"):WaitForChild("Mushgrove")
        }
        ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RF/SetZone"):InvokeServer(unpack(args))
    end,
})

TeleportsTab:AddButton({
    Name = "Teleport to Tempest",
    Callback = function()
        local args = {
            [1] = Workspace:WaitForChild("zones"):WaitForChild("player"):WaitForChild("Terrapin")
        }
        ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RF/SetZone"):InvokeServer(unpack(args))
    end,
})

TeleportsTab:AddButton({
    Name = "Teleport to Sundial",
    Callback = function()
        local args = {
            [1] = Workspace:WaitForChild("zones"):WaitForChild("player"):WaitForChild("Sunstone")
        }
        ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RF/SetZone"):InvokeServer(unpack(args))
    end,
})

TeleportsTab:AddButton({
    Name = "Teleport to Eclipse",
    Callback = function()
        local args = {
            [1] = Workspace:WaitForChild("zones"):WaitForChild("player"):WaitForChild("Ancient Isle")
        }
        ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RF/SetZone"):InvokeServer(unpack(args))
    end,
})

TeleportsTab:AddButton({
    Name = "Teleport to Meteor",
    Callback = function()
        local args = {
            [1] = Workspace:WaitForChild("zones"):WaitForChild("player"):WaitForChild("Roslit Volcano")
        }
        ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RF/SetZone"):InvokeServer(unpack(args))
    end,
})

TeleportsTab:AddButton({
    Name = "Teleport to Blizzard",
    Callback = function()
        local args = {
            [1] = Workspace:WaitForChild("zones"):WaitForChild("player"):WaitForChild("Frigid Cavern")
        }
        ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RF/SetZone"):InvokeServer(unpack(args))
    end,
})

TeleportsTab:AddButton({
    Name = "Teleport to Avalanche",
    Callback = function()
        local args = {
            [1] = Workspace:WaitForChild("zones"):WaitForChild("player"):WaitForChild("Overgrowth Caves")
        }
        ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RF/SetZone"):InvokeServer(unpack(args))
    end,
})

TeleportsTab:AddButton({
    Name = "Teleport to Zeus' Storm",
    Callback = function()
        local args = {
            [1] = Workspace:WaitForChild("zones"):WaitForChild("player"):WaitForChild("Zeus's Rod Room")
        }
        ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RF/SetZone"):InvokeServer(unpack(args))
    end,
})

-- Misc Tab
local MiscTab = Window:MakeTab({
    Name = "Misc",
    Icon = "rbxassetid://4483362458",
    PremiumOnly = false
})

MiscTab:AddLabel("Credits")
MiscTab:AddLabel("Script made by Midnight Hub")
MiscTab:AddLabel("UI by ChaosScripter")

local FPS = 0
local FrameCounter = 0
local FrameTimer = tick()

local pingLabel = MiscTab:AddLabel("Ping: " .. tostring(math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())))

local fpsLabel = MiscTab:AddLabel("FPS: 0")

coroutine.wrap(function()
    while true do
        FrameCounter += 1

        if (tick() - FrameTimer) >= 1 then
            FPS = FrameCounter
            FrameTimer = tick()
            FrameCounter = 0
        end

        local ping = math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())

        fpsLabel:Set("FPS: " .. tostring(FPS))
        pingLabel:Set("Ping: " .. tostring(ping))

        wait(0.1)
    end
end)()

local AntiDrown = false
local LocalPlayer = game.Players.LocalPlayer
local LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

local CharAddedAntiDrownCon

MiscTab:AddToggle({
    Name = "AntiDrown",
    Default = false,
    Callback = function(Value)
        AntiDrown = Value
        if Value == true then
            if LocalCharacter and LocalCharacter:FindFirstChild("client") then
                local oxygen = LocalCharacter.client:FindFirstChild("oxygen")
                if oxygen and oxygen.Enabled == true then
                    oxygen.Enabled = false
                end
            end
            CharAddedAntiDrownCon = LocalPlayer.CharacterAdded:Connect(function()
                LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
                if LocalCharacter and LocalCharacter:FindFirstChild("client") then
                    local oxygen = LocalCharacter.client:FindFirstChild("oxygen")
                    if oxygen and oxygen.Enabled == true and AntiDrown == true then
                        oxygen.Enabled = false
                    end
                end
            end)
        else
            if LocalCharacter and LocalCharacter:FindFirstChild("client") then
                local oxygen = LocalCharacter.client:FindFirstChild("oxygen")
                if oxygen and oxygen.Enabled == false then
                    oxygen.Enabled = true
                end
            end
            if CharAddedAntiDrownCon then
                CharAddedAntiDrownCon:Disconnect()
            end
        end
    end,
})

-- Initialize Collar Player settings
local CollarPlayer = false
local SelectedPlayer = nil
local PlayerList = {}

-- Fill PlayerList with the names of all players in the game
for _, player in pairs(game.Players:GetPlayers()) do
    table.insert(PlayerList, player.Name)
end

-- Update PlayerList whenever a player joins or leaves
game.Players.PlayerAdded:Connect(function(player)
    table.insert(PlayerList, player.Name)
end)

game.Players.PlayerRemoving:Connect(function(player)
    for i, name in ipairs(PlayerList) do
        if name == player.Name then
            table.remove(PlayerList, i)
            break
        end
    end
end)

MiscTab:AddToggle({
    Name = "Collar Player",
    Default = false,
    Callback = function(Value)
        CollarPlayer = Value
        if CollarPlayer and SelectedPlayer then
            CollarConnection = LocalCharacter.ChildAdded:Connect(function(child)
                if CollarPlayer and child:IsA("Tool") and SelectedPlayer then
                    child.ChildAdded:Connect(function(blehh)
                        if blehh.Name == "bobber" then
                            local RopeConstraint = blehh:FindFirstChildOfClass("RopeConstraint")

                            if RopeConstraint then
                                RopeConstraint.Length = math.huge
                                RopeConstraint.Changed:Connect(function(property)
                                    if property == "Length" then
                                        RopeConstraint.Length = math.huge
                                    end
                                end)
                            end

                            task.wait(1)
                            while CollarPlayer and blehh.Parent do
                                local targetPlayer = game.Players:FindFirstChild(SelectedPlayer)
                                if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
                                    blehh.CFrame = targetPlayer.Character.Head.CFrame * CFrame.new(0, -0.5, 0) -- Position it slightly below the head
                                end
                                task.wait()
                            end
                        end
                    end)
                end
            end)
        else
            if CollarConnection then
                CollarConnection:Disconnect()
                CollarConnection = nil
            end
        end
    end,
})

MiscTab:AddDropdown({
    Name = "Select Player",
    Options = PlayerList,
    Callback = function(Selected)
        SelectedPlayer = Selected
    end,
})

MiscTab:AddButton({
    Name = "Boost FPS",
    Callback = function()
        _G.Ignore = {}
        _G.Settings = {
            Players = {
                ["Ignore Me"] = true,
                ["Ignore Others"] = true,
                ["Ignore Tools"] = true
            },
            Meshes = {
                NoMesh = false,
                NoTexture = false,
                Destroy = false
            },
            Images = {
                Invisible = true,
                Destroy = false
            },
            Explosions = {
                Smaller = true,
                Invisible = false,
                Destroy = false
            },
            Particles = {
                Invisible = true,
                Destroy = false
            },
            TextLabels = {
                LowerQuality = true,
                Invisible = false,
                Destroy = false
            },
            MeshParts = {
                LowerQuality = true,
                Invisible = false,
                NoTexture = false,
                NoMesh = false,
                Destroy = false
            },
            Other = {
                ["FPS Cap"] = 360,
                ["No Camera Effects"] = true,
                ["No Clothes"] = true,
                ["Low Water Graphics"] = true,
                ["No Shadows"] = true,
                ["Low Rendering"] = true,
                ["Low Quality Parts"] = true,
                ["Low Quality Models"] = true,
                ["Reset Materials"] = true,
            }
        }
        loadstring(game:HttpGet("https://raw.githubusercontent.com/CasperFlyModz/discord.gg-rips/main/FPSBooster.lua"))()
    end,
})

MiscTab:AddButton({
    Name = "Destroy GUI",
    Callback = function()
        -- Disable Auto Cast
        autoCast = false
        if autoCastConnection then
            autoCastConnection:Disconnect()
            autoCastConnection = nil
        end
        if autoCastConnection2 then
            autoCastConnection2:Disconnect()
            autoCastConnection2 = nil
        end

        -- Disable Auto Reel
        autoReel = false
        if autoreelandshakeConnection then
            autoreelandshakeConnection:Disconnect()
            autoreelandshakeConnection = nil
        end

        -- Disable Auto Shake
        autoShake = false
        if autoreelandshakeConnection then
            autoreelandshakeConnection:Disconnect()
            autoreelandshakeConnection = nil
        end

        -- Reset Zone Cast
        ZoneCast = false
        if ZoneConnection then
            ZoneConnection:Disconnect()
            ZoneConnection = nil
        end

        -- Disable AntiDrown and re-enable oxygen
        AntiDrown = false
        local LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local oxygen = LocalCharacter:FindFirstChild("client") and LocalCharacter.client:FindFirstChild("oxygen")
        if oxygen then
            oxygen.Enabled = true
        end
        if CharAddedAntiDrownCon then
            CharAddedAntiDrownCon:Disconnect()
            CharAddedAntiDrownCon = nil
        end

        -- Remove safe zone part if it exists
        if safePart then
            safePart:Destroy()
            safePart = nil
        end

        -- Destroy the GUI
        OrionLib:Destroy()
    end,
})

OrionLib:Init()
